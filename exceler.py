import xlwings as xw
import numpy as np
import os
from cif_manager import CifManager
from sum_manager import SumManager
from operator import itemgetter

sheet_name = "CIFs"


def xl_shape(xl_file, sheet="CIFs"):
    # Return shape [height, width] of the xl_file
    return xw.Book(xl_file).sheets[sheet].used_range.shape


def in_sheet(xl_file, cif_name, sheet="CIFs"):
    # Return index of cif_name in "Path" column of xl_file
    height = xl_shape(xl_file, sheet=sheet)[0]
    if cif_name in xw.Book(xl_file).sheets[sheet][0:height, 0].value:
        row_index = xw.Book(xl_file).sheets[sheet][0:height, 0].value.index(cif_name)
        return row_index
    else:
        return height


def set_table_alignment(xl_file, sheet="CIFs"):
    # Align CIFs table
    height, width = xl_shape(xl_file, sheet=sheet)
    if sheet == "CIFs":
        xw.Book(xl_file).sheets[sheet][:, width].number_format = "General"
        xw.Book(xl_file).sheets[sheet][0:height, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter
        xw.Book(xl_file).sheets[sheet][0:height, name_to_index(xl_file, "Path")].api.HorizontalAlignment = \
            xw.constants.HAlign.xlHAlignRight
        xw.Book(xl_file).sheets[sheet][0:height, name_to_index(xl_file, "Filename")].api.HorizontalAlignment = \
            xw.constants.HAlign.xlHAlignLeft

    # Align SUM table
    if sheet == "Integrations":
        xw.Book(xl_file).sheets[sheet][0:height, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter

    # Align Atomic Coordinates table
    if sheet == "Atomic_Coordinates":
        xw.Book(xl_file).sheets[sheet][0:height, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter

    # Align Bonds table
    if sheet == "Bonds":
        xw.Book(xl_file).sheets[sheet][0:height, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter
        xw.Book(xl_file).sheets[sheet][0:height, 0].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignRight

    # Align Ange table
    if sheet == "Angles":
        xw.Book(xl_file).sheets[sheet][0:height, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter
        xw.Book(xl_file).sheets[sheet][0:height, 0].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignRight

    # Align Torsions
    if sheet == "Torsions":
        height, width = xl_shape(xl_file, sheet=sheet)
        xw.Book(xl_file).sheets[sheet][0:height, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter
        xw.Book(xl_file).sheets[sheet][0:height, 0].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignRight


def generate_eosfit_input(xl_file, output_file):
    eosfit_default_format = ['P', 'SIGP', 'T', 'SIGT', 'V', 'SIGV',
                             'A', 'SIGA', 'B', 'SIGB', 'C', 'SIGC',
                             'ALPHA', 'SIGAL', 'BETA', 'SIGBE', 'GAMMA', 'SIGGA']
    if "EOS" not in xw.Book(xl_file).sheet_names:
        return "EOS sheet doesn't exist in chosen excel file"

    format_from_excel = {}
    height, width = xl_shape(xl_file, sheet="EOS")
    for i in range(width):
        if xw.Book(xl_file).sheets["EOS"][0, i].value in eosfit_default_format:
            format_from_excel[xw.Book(xl_file).sheets["EOS"][0, i].value] = i

    with open(output_file, "w") as eos_file:
        new_line = " ".join(["format", "1"] + list(format_from_excel.keys()) + ["\n"])
        eos_file.write("# Current file was automatically generated by LogBooker2.0\n")
        eos_file.write(new_line)
        for i in range(1, height, 1):
            new_line = list(itemgetter(*format_from_excel.values())(xw.Book(xl_file).sheets["EOS"][i, :width].value))
            if any(val is None for val in new_line):
                pass
            else:
                eos_file.write("\t".join(list(map(str, new_line)) + ["\n"]))
    return "The EoSFit input file was successfully generated"


def set_table_text_style(xl_file, sheet="CIFs"):
    # Style of CIFs table
    if sheet == "CIFs":
        height, width = xl_shape(xl_file)
        xw.Book(xl_file).sheets[sheet][0:height, 0:2].api.Font.Underline = -4142
        xw.Book(xl_file).sheets[sheet][0:height, 0:2].font.color = (104, 122, 147)
        xw.Book(xl_file).sheets[sheet][0:height, 0:2].font.bold = True

    # Style of SUM table
    if sheet == "SUM":
        pass


def set_row_style(xl_file, index, sheet="CIFs"):
    if sheet == "CIFs":
        width = xl_shape(xl_file, sheet="CIFs")[1]
        # Text style
        xw.Book(xl_file).sheets[sheet][index, 0:2].api.Font.Underline = -4142
        xw.Book(xl_file).sheets[sheet][index, 0:2].font.color = (104, 122, 147)
        xw.Book(xl_file).sheets[sheet][index, 0:2].font.bold = True

        # Alignment
        xw.Book(xl_file).sheets[sheet][index, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter
        xw.Book(xl_file).sheets[sheet][
            index, name_to_index(xl_file, "Path")].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignRight
        xw.Book(xl_file).sheets[sheet][
            index, name_to_index(xl_file, "Filename")].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignLeft

    if sheet == "Integrations":
        width = xl_shape(xl_file, sheet="Integrations")[1]
        xw.Book(xl_file).sheets[sheet][index, 0:width].api.HorizontalAlignment = xw.constants.HAlign.xlHAlignCenter


def format_table(xl_file, settings, sheet="CIFs"):
    sheets = ["CIFs", "Integrations", "Atomic_Coordinates", "Bonds", "Angles", "Torsions"]
    # Adjust CIFs sheet
    height, width = xl_shape(xl_file, sheet=sheets[0])
    set_table_alignment(xl_file, sheet=sheets[0])
    for row_index in range(1, height, 1):
        if settings.hyper:
            hyperlink(xl_file, row_index, sheet=sheets[0])  # Hyperlinking
        if settings.light:
            highlight_row_by_value(xl_file, row_index, settings)  # Highlighting
    set_table_text_style(xl_file, sheets[0])

    # Adjust Integration sheet
    if in_sheet(xl_file, "", sheets[0]):
        remove_row(xl_file, 1, "Integrations")
    set_table_alignment(xl_file, sheet=sheets[1])

    # Adjust Atomic Coordinates sheet
    set_table_alignment(xl_file, sheet=sheets[2])

    # Adjust Atomic Coordinates sheet
    set_table_alignment(xl_file, sheet="Bonds")

    # Adjust Angles sheet
    set_table_alignment(xl_file, sheet="Angles")

    # Adjust Torsions sheet
    set_table_alignment(xl_file, sheet="Torsions")


def hyperlink(xl_file, index, sheet="CIFs"):
    # Read parameters
    abs_path = xw.Book(xl_file).sheets[sheet][index, 0].value
    folder_path = os.path.dirname(xw.Book(xl_file).sheets[sheet][index, 0].value)
    file_name = xw.Book(xl_file).sheets[sheet][index, 1].value

    # Add hyperlinks
    xw.Book(xl_file).sheets[sheet][index, 1].add_hyperlink(abs_path, text_to_display=file_name)
    xw.Book(xl_file).sheets[sheet][index, 0].add_hyperlink(folder_path, text_to_display=abs_path)


def replace_row(xl_file, index, df, sheet="CIFs"):
    # Replace raw in Excel file, with data from corresponding cif_df
    if sheet == "CIFs":
        formatted_data = np.insert(df.iloc[0].values, 0, df.index[0])
        xw.Book(xl_file).sheets["CIFs"][index, :].value = formatted_data
    if sheet == "Integrations":
        formatted_data = np.insert(df.iloc[0].values, 0, df.index[0])
        xw.Book(xl_file).sheets["Integrations"][index, :].value = formatted_data


def update_table(xl_file, file_name, settings, echo):
    if file_name.endswith(".cif"):
        # Create cif dataframe
        if xw.Book(xl_file).sheets["CIFs"][1, 0].value is None:
            remove_row(xl_file, 1, sheet="CIFs")
        cm = CifManager()
        index = in_sheet(xl_file, file_name, sheet="CIFs")
        cif_df = cm.cif_to_pandas(file_name, settings)
        print(0)
        # Drop columns which do not exist in Excel file
        width = xl_shape(xl_file)[1]
        xl_cols = xw.Book(xl_file).sheets["CIFs"][0, 1:width].value
        columns_to_drop = list(set(cif_df.columns.values) - set(xl_cols))
        cif_df = cif_df.drop(columns=columns_to_drop, axis=1)
        # Update excel table
        if (is_column_exist(xl_file, "Program", sheet="CIFs") and
                (settings.skip_crys and "CrysAlisPro" in cif_df["Program"][0])):
            return None
        else:
            echo.append_log_message("...Updating: " + file_name)
            replace_row(xl_file, index, cif_df, sheet="CIFs")
            if settings.hyper:
                hyperlink(xl_file, index, sheet="CIFs")
                set_row_style(xl_file, index, sheet="CIFs")
            if settings.light:
                highlight_row_by_value(xl_file, index, settings, sheet="CIFs")

    if file_name.endswith(".sum"):
        # Check if the file is completed
        sm = SumManager(file_name)
        if not sm.is_finished(file_name):
            return

        if xw.Book(xl_file).sheets["Integrations"][1, 0].value is None:
            remove_row(xl_file, 1, sheet="Integrations")

        # Updating table
        echo.append_log_message("...Updating:" + file_name)
        sum_df = sm.sum_to_pandas(file_name)

        date_str = sum_df.index[0]
        index = in_sheet(xl_file, date_str, sheet="Integrations")
        replace_row(xl_file, index, sum_df, sheet="Integrations")
        set_row_style(xl_file, index, sheet="Integrations")


def remove_row(xl_file, index=1, sheet="CIFs"):
    xw.Book(xl_file).sheets[sheet][index, :].delete()


def highlight_row_by_value(xl_file, row_index, settings, sheet="CIFs", color=(221, 255, 204)):
    # check if the filter is in the Excel columns
    if not is_column_exist(xl_file, settings.filter, sheet=sheet):
        return 0

    # extract values
    col_index = name_to_index(xl_file, settings.filter, sheet=sheet)
    value = xw.Book(xl_file).sheets[sheet][row_index, col_index].value
    try:
        if float(value) < settings.filter_limit:
            xw.Book(xl_file).sheets[sheet][row_index, 0:xl_shape(xl_file)[1]].color = color
            return True
        else:
            xw.Book(xl_file).sheets[sheet][row_index, 0:xl_shape(xl_file)[1]].color = None
            return False
    except:
        xw.Book(xl_file).sheets[sheet][row_index, 0:xl_shape(xl_file)[1]].color = None
        return False


def name_to_index(xl_file, name, sheet="CIFs"):
    # Return the column index by column name
    return xw.Book(xl_file).sheets[sheet][0, :].value.index(name)


def is_column_exist(xl_file, column_name, sheet="CIFs"):
    # Return True if column_name exist in the Excel header, or False if not
    width = xl_shape(xl_file, sheet=sheet)[1]
    if column_name in xw.Book(xl_file).sheets[sheet][0, 0:width].value:
        return True
    else:
        return False


def main():
    # logbook_file = "D:\Python_Projects\Logbooker\\1111.xlsx"
    generate_eosfit_input("D:\\Python_Projects\\LogBooker1.9\\1.xlsx", "test.dat")


if __name__ == "__main__":
    main()
